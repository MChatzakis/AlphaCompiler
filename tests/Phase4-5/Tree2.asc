nl = "\n";

function Power(base, exponent) {
	
	if (exponent < 0)
		return -1;
	
	if (exponent == 0)
		return 1;
	
	return base * Power(base, exponent - 1);
}


//----------------------------------------------

function TreeNode (p, l, r) {
	parent  = 0;
	left	= 0;
	right	= 0; 

	return  [
		{"class" : "TreeNode"},
		{"parent": parent},	
		{"left"	 : left},
		{"right" : right},
		{"info"	 : 0},
		{"marked": false}
	];
}

//----------------------------------------------

function Stack () {

	return [
		{"class" : "Stack"},
		{"back"  : 0},
		{"data"  : []},
		{"empty" : (function (self){
			return self.back == 0;
		})},
		
		{"push"	 : (function (self, data){
			self.data[self.back++] = data;
		})},
		
		{"pop"	 : (function (self){
			if (self.back > 0)
				self.data[--self.back] = nil;
		})},
		
		{"top" 	 : (function (self){
			return self.data[self.back-1];
		})}
	];
}

//----------------------------------------------

function List () {
	return [
		{"class" : "List"},
		{"back"  : 0},
		{"front" : 0},
		{"data"  : []},
		
		{"empty" : (function (self){
			return self.back == 0;
		})},
		
		{"erase" : (function (self){
			self.net	= 0;
			self.data 	= [];
		})},		

		{"size" : (function (self){
			return self.back;
		})},
		
		{"push_back" : (function (self, data){
			self.data[self.back++] = data;
		})},
		
		{"pop_back"	 : (function (self){
			local data = nil;
			if (self.back > 0) {
				data = self.data[--self.back];
				self.data[self.back] = nil;
			}
			return data;
		})},
		
		{"pop_front"	 : (function (self){
			local data = nil;
			if (self.front < self.back) {
				data = self.data[self.front];
				self.data[self.front++] = nil;
			}
			return data;
		})}
	];
}

//----------------------------------------------

function PrintTree (root) {
	if (root)
		print(root.info, nl);

	if (root.left)
		PrintTree(root.left);

	if (root.right)
		PrintTree(root.right);
}

//----------------------------------------------

function PostOrder(root) {
	k = Stack();//.new();
	k..push(root);

	while(not k..empty()){
		tmp = k..top();
		k..pop();
		
		if (tmp.marked)
			print(tmp.info, nl);
		else {
			if (tmp.left)   k..push(tmp.left);
			if (tmp.right)	k..push(tmp.right);
			tmp.marked = true;
			k..push(tmp);
		}
	}
}

//----------------------------------------------

function GenerateTree(maxHeight) {
	if (maxHeight < 0)
		return nil;
			
	local currentlevel	= List();//.new();
	local nextLevel 	= List();//.new();
	
	local root 			= TreeNode();
	root.info			= "root";
	currentlevel..push_back(root);
	//level = 2 beacuse we have already created the root level
	
	for(local level = 2; level <= maxHeight; ++level) {
		
		local nodesInLevel = Power(2, level-1);		//number of nodes in a level: 2^(level-1)
		for(local i = 0; i < nodesInLevel; i = i+2) {
			local parent 	= currentlevel..pop_front();
			local childR 	= TreeNode();
			local childL 	= TreeNode();
			
			childL.info 	= parent.info + "L";
			childR.info 	= parent.info + "R";
			
			parent.left		= childL;
			parent.right	= childR;
			
			childL.parent	= parent;
			childR.parent	= parent;
			
			nextLevel..push_back(childL);
			nextLevel..push_back(childR);
		}
		currentlevel = nextLevel;
	}
	
	return root;
}

tree = GenerateTree(10);
PrintTree(tree);
print("\n", ::nl, "\n", nl);
PostOrder(tree);
