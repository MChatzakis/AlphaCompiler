avm
function fract(x) {

	if(x == 1)
		return 1;
	else
		return x*fract(x-1);
}

print("fract(12): ", fract(12), " (must be 479001600)\n");

function fibo(x) {

        if(x==0)
                return 0;
        if(x==1)
                return 1;

        return fibo(x-1) + fibo(x-2);
}

print("fibonacci(10): ", fibo(10), " (must be 55)\n");

function Power(base, exponent) {

        if (exponent < 0)
                return -1;

        if (exponent == 0)
                return 1;

        return base * Power(base, exponent - 1);
}

print("2^32 must be 4,294,967,296: >", Power(2,32), "<\n");

//////////////////

function foo1(f1, f2, x) {

	print("foo1: ", x, "\n");

	if(x==0)
		return x;

	return f1(foo1, f2, x-1);
}

function foo2(f1, f2, x) {

	print("foo2: ", x, "\n");
	return f2(foo2, f1, x+1);
}

function foo3(f1, f2, x) {

	print("foo3: ", x, "\n");
	return f2(f1, foo3, x-2);
}

	foo1(foo2, foo3, 10);

/*
Output for this:
foo1: 10
foo2: 9
foo3: 10
foo1: 8
foo2: 7
foo3: 8
foo1: 6
foo2: 5
foo3: 6
foo1: 4
foo2: 3
foo3: 4
foo1: 2
foo2: 1
foo3: 2
foo1: 0
*/


pr = (function (){return "print";});
pr("hello world\nOk\n");

///////////////////////////////////

function foo() { print("global\n"); }

{ 
	function foo() { print("scope1\n"); }
	foo();
	{
		function foo() {print("scope2\n");}
		//function foo() {print("redefinition\n");}
		foo();
		::foo();
	}
	::foo();
}
	foo();

function bar() {
	
	foo();
	function bar() {

		print("bar_inner\n");
	}

	bar();
}

   bar();

/*
Output for this:
scope1
scope2
global
global
global
global
bar_inner
*/
