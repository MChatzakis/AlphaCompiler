/*t file for the final phase of HY-340: Languages & Compilers
    Computer science dpt, University of Crete, Greece
*/

/*
    proper output for this test:

    Table t is: [{key1 : 1}, {key2 : 2}, {key3 : tria}, {key4 : true}, {key5 : [{1 : 3}, {2 : 4}, {4 : 5}, ]}, ]
    Lenght of table t is (must be 5):5
    Function prnt printing: prnt() and print: lib::print
    Table t in prnt is: [{0 : [{key1 : 1}, {key2 : 2}, {key3 : tria}, {key4 : true}, {key5 : [{1 : 3}, {2 : 4}, {4 : 5}, ]}, ]},
    {1 : 2}, {2 : 3.14}, {3 : 4}, {4 : true}, {5 : false}, ]
    Table indices of global t: [{0 : key1}, {1 : key2}, {2 : key3}, {3 : key4}, {4 : key5}, ] which has length: 5
    Table copy is: [{key1 : 1}, {key2 : 2}, {key3 : tria}, {key4 : true}, {key5 : [{1 : 3}, {2 : 4}, {4 : 5}, ]}, ] and it is printed with print_function
    PASSED: value: nil type: nil
    PASSED: value: nil type: nil
    PASSED: value: 3.141 type: number
    PASSED value: 1.41421 != 1.41421
    PASSED: value: nil type: nil
    PASSED value: 0.5 type: number
    PASSED value: 0.5 type: number
    PASSED: value: nil type: nil
    PASSED: value: nil type: nil
    --->12
    Testing lib function typeof

    trypeof([1,2,3])        :>table<
    trypeof((function(){})) :userfunction<
    trypeof(typeof) :libraryfunction<

    Testing lib function input and typeof (type exit for exit)

    input: 3
    typeof(stdin): number, value of stdin: 3
    input: 3.4
    typeof(stdin): number, value of stdin: 3.4
    input: true
    typeof(stdin): boolean, value of stdin: true
    input: false
    typeof(stdin): boolean, value of stdin: false
    input: p[
    typeof(stdin): string, value of stdin: p[
    input: 4.4a
    typeof(stdin): string, value of stdin: 4.4a
    input: "gap gap gap"
    typeof(stdin): string, value of stdin: "gap gap gap"
    input: exit
    typeof(stdin): string, value of stdin: exit
*/



t = [ { "key1" : 1 }, { "key2" : 2 }, { "key3" : "tria" }, { "key4" : true }, { "key5" : [ nil, 3, 4, nil, 5 ] } ];

print("Table t is: ", t, "\n");
print("Lenght of table t is (must be 5):", objecttotalmembers(t),"\n");

function foo() {
    function lala() {
        function prnt() {
            local t = [ ::t, 2, 3.14, "4", true, false ];
            print("Table t in prnt is: ", t, "\n");
        }
        print("Function prnt printing: ", prnt, " and print: ", print, "\n");
        prnt();
    }
    return lala;
}

f = foo();
f();

ind = objectmemberkeys(t);
print("Table indices of global t: ", ind, " which has length: ", objecttotalmembers(ind), "\n");

function my_print() {
    targs = totalarguments();
    
    if (targs < 0 or targs > 20) {
        print("ERROR in my_print: arguments reported: ", targs, "\n");
        return nil;
    }

    for (i = 0; i < totalarguments(); ++i) {
        print(argument(i));
    }
}

////////////////////////////////////////////////////////////////////////
// PRINT FUNCTION HERE

print_function = my_print;
//print_function = print;

////////////////////////////////////////////////////////////////////////
//tcopy = objectcopy(t);
//print_function("Table copy is: ", tcopy, " ", "and it is printed with print_function", "\n");

function check (variable, type, value) {
    
    if (typeof(variable) != type) {
        print_function("FAILED type: ", typeof(variable), " != ", type, ", value: ", variable, "\n");
        return nil;
    }
    if (value != variable) {
        print_function("FAILED value: ", variable, " != ", value, "\n");
        return nil;
    }
    print_function("PASSED: value: ", value, " type: ", type, "\n");
    
}

check(strtonum("foo"), "nil", nil);
check(strtonum("3.12a"), "nil", nil);
check(strtonum("3.141"), "number", 3.141);
check(sqrt(2), "number", 1.41421356237309504880);
check(sqrt(-1), "nil", nil);
check(cos(45), "number", 0.5);
check(sin(45), "number", 0.5);
check(totalarguments(), "nil", nil);
check(argument(0), "nil", nil);


ax = strtonum("12");
print("--->", ax, "\n");


print("Testing lib function typeof\n\n");
print("trypeof([1,2,3])\t:>", typeof([1,2,3]), "<\n");
print("trypeof((function(){}))\t:", typeof((function(){})), "<\n");
print("trypeof(typeof)\t:", typeof(typeof), "<\n\n");
print("Testing lib function input and typeof (type exit for exit)\n\n");

stdin = nil;
while (true) {
        
    if (typeof(stdin) == "string") {
        if (stdin == "exit") {
            break;
        }
    }

    print("input: ");
    stdin = input();
    print("typeof(stdin): ", typeof(stdin), ", value of stdin: ", stdin, "\n");
}

